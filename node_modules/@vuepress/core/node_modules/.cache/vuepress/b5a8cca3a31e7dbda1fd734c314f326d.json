{"remainingRequest":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\@vuepress\\core\\lib\\client\\components\\TOC.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\@vuepress\\core\\lib\\client\\components\\TOC.vue","mtime":499162500000},{"path":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\nimport HeaderList from './HeaderList.vue'\nexport default {\n  props: {\n    listType: {\n      type: [String, Array],\n      default: 'ul'\n    },\n    includeLevel: {\n      type: Array,\n      default: () => [2, 3]\n    }\n  },\n  components: { HeaderList },\n  computed: {\n    listTypes () {\n      return typeof this.listType === 'string' ? [this.listType] : this.listType\n    },\n    groupedHeaders () {\n      return this.groupHeaders(this.$page.headers).list\n    }\n  },\n  methods: {\n    groupHeaders (headers, startLevel = 1) {\n      const list = []\n      let index = 0\n      while (index < headers.length) {\n        const header = headers[index]\n        if (header.level < startLevel) break\n        if (header.level > startLevel) {\n          const result = this.groupHeaders(headers.slice(index), header.level)\n          if (list.length) {\n            list[list.length - 1].children = result.list\n          } else {\n            list.push(...result.list)\n          }\n          index += result.index\n        } else {\n          if (header.level <= this.includeLevel[1] && header.level >= this.includeLevel[0]) {\n            list.push({ ...header })\n          }\n          index += 1\n        }\n      }\n      return { list, index }\n    }\n  }\n}\n",{"version":3,"sources":["TOC.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TOC.vue","sourceRoot":"node_modules/@vuepress/core/lib/client/components","sourcesContent":["<template>\n  <div>\n    <slot name=\"header\" />\n    <HeaderList :items=\"groupedHeaders\" :list-type=\"listTypes\" />\n    <slot name=\"footer\" />\n  </div>\n</template>\n\n<script>\nimport HeaderList from './HeaderList.vue'\nexport default {\n  props: {\n    listType: {\n      type: [String, Array],\n      default: 'ul'\n    },\n    includeLevel: {\n      type: Array,\n      default: () => [2, 3]\n    }\n  },\n  components: { HeaderList },\n  computed: {\n    listTypes () {\n      return typeof this.listType === 'string' ? [this.listType] : this.listType\n    },\n    groupedHeaders () {\n      return this.groupHeaders(this.$page.headers).list\n    }\n  },\n  methods: {\n    groupHeaders (headers, startLevel = 1) {\n      const list = []\n      let index = 0\n      while (index < headers.length) {\n        const header = headers[index]\n        if (header.level < startLevel) break\n        if (header.level > startLevel) {\n          const result = this.groupHeaders(headers.slice(index), header.level)\n          if (list.length) {\n            list[list.length - 1].children = result.list\n          } else {\n            list.push(...result.list)\n          }\n          index += result.index\n        } else {\n          if (header.level <= this.includeLevel[1] && header.level >= this.includeLevel[0]) {\n            list.push({ ...header })\n          }\n          index += 1\n        }\n      }\n      return { list, index }\n    }\n  }\n}\n</script>\n"]}]}