{"remainingRequest":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\docs\\.vuepress\\components\\forms\\common\\checkbox.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\docs\\.vuepress\\components\\forms\\common\\checkbox.vue","mtime":1553960250110},{"path":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport {\r\n    FormCheckbox,\r\n} from 'bootstrap-vue/es/components';\r\n\r\nexport default {\r\n    mounted() {\r\n        this.valueLocal = this.value;\r\n        self = this;\r\n        let result = true;\r\n        this.$validator.extend('customChkBox', {\r\n\r\n            validate(value, field) {\r\n                if (value === null || value === self.unchecked) {\r\n                    result = false;\r\n                } else {\r\n                    result = true;\r\n                }\r\n                if (self.backup === null) {\r\n                    value = self.backup;\r\n                    self.resetBackup();\r\n                    self.$emit('input', value);\r\n                }\r\n                return result;\r\n            },\r\n            getMessage(field, value) {\r\n                if (!(result)) {\r\n                    return field + ' is required.';\r\n                }\r\n            },\r\n\r\n        });\r\n    },\r\n    components: {\r\n        FormCheckbox,\r\n    },\r\n    props: {\r\n        value: {\r\n            type: String,\r\n            default: null,\r\n        },\r\n        checked: Boolean,\r\n        id: {\r\n            type: String,\r\n        },\r\n        name: {\r\n            type: String,\r\n        },\r\n        label: {\r\n            type: String,\r\n        },\r\n        labelFor: {\r\n            type: String,\r\n        },\r\n        checkedValue: {\r\n            type: String,\r\n            default: 'Y',\r\n        },\r\n        unchecked: {\r\n            type: String,\r\n            default: 'N',\r\n        },\r\n        validation: {\r\n            type: String,\r\n            default: 'N',\r\n        },\r\n        vertical: {\r\n            type: String,\r\n        },\r\n        disabled: {\r\n            type: Boolean,\r\n        },\r\n    },\r\n    methods: {\r\n        onChange (value) {\r\n          this.$emit('change', value);\r\n        },\r\n        onInput(value) {\r\n            self = this;\r\n            this.$emit('input', value);\r\n            this.$emit('checked', {\r\n              id: this.id,\r\n              checked: value,\r\n            });\r\n        },\r\n        resetBackup() {\r\n            this.backup = 'N';\r\n        },\r\n        // TODO: Fix how validation is being applied\r\n        updateState () {\r\n          if (!(this.isNull)) {\r\n            this.backup = value;\r\n          }\r\n          if (value === null) {\r\n            this.isNull = true;\r\n          }\r\n          this.valueLocal = value;\r\n          if (this.valueLocal == null && this.validation === 'required') {\r\n            this.valueLocal = 'N';\r\n          }\r\n        },\r\n    },\r\n    watch: {\r\n        checked (isChecked) {\r\n          // Set v-model to equal the current checked or unchecked value\r\n          this.valueLocal = isChecked ? this.checkedValue : this.uncheckedValue;\r\n        },\r\n        value(value) {\r\n            if (!(this.isNull)) {\r\n                this.backup = value;\r\n            }\r\n            if (value === null) {\r\n                this.isNull = true;\r\n            }\r\n\r\n            this.valueLocal = value;\r\n            if (this.valueLocal == null && this.validation === 'required') {\r\n                this.valueLocal = 'N';\r\n            }\r\n\r\n        },\r\n    },\r\n    computed: {\r\n        customValidation() {\r\n\r\n            if (this.validation === 'required') {\r\n                return {\r\n                    'customChkBox': this.validation.substring(0, 8) === 'required',\r\n                };\r\n            }\r\n        },\r\n        classObject() {\r\n            if (this.validation) {\r\n                return {\r\n                    'v-required': this.validation.substring(0, 8) === 'required',\r\n                };\r\n            }\r\n        },\r\n    },\r\n    data() {\r\n        return {\r\n            valueLocal: null,\r\n            self: null,\r\n            backup: null,\r\n            isNull: false,\r\n        };\r\n    },\r\n};\r\n",{"version":3,"sources":["checkbox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAefile":"checkbox.vue","sourceRoot":"docs/.vuepress/components/forms/common","sourcesContent":["<template>\r\n<UCMSFormGroup :id=\"'lbl' + id\" :label=\"label\" :label-for=\"id\" :class=\"classObject\" v-if=\"vertical=='Y'\">\r\n    <b-form-checkbox v-validate=\"customValidation\" v-model=\"valueLocal\" :name=\"name\" @input=\"onInput\" @change=\"$emit('input', $event)\" :disabled=\"disabled\" :checked=\"checked\" :unchecked-value=\"unchecked\" :value=\"value\" :class=\"{ 'input':true, 'is-invalid': errors.has(name) }\">\r\n    </b-form-checkbox>\r\n    <div class=\"invalid-feedback\" v-show=\"errors.has(name)\">{{ errors.first(name) }}</div>\r\n</UCMSFormGroup>\r\n<div v-else-if=\"vertical !='Y'\">\r\n    <b-form-checkbox v-validate=\"customValidation\" v-model=\"valueLocal\" :name=\"name\" @input=\"onInput\" @change=\"$emit('input', $event)\" :unchecked-value=\"unchecked\" :disabled=\"disabled\" :value=\"checkedValue\" :class=\"{ 'input':true, 'is-invalid': errors.has(name) }\">\r\n        <dpLabel :id=\"id\" :label=\"label\"></dpLabel>\r\n    </b-form-checkbox>\r\n    <div class=\"invalid-feedback\" v-show=\"errors.has(name)\">{{ errors.first(name) }}</div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n    FormCheckbox,\r\n} from 'bootstrap-vue/es/components';\r\n\r\nexport default {\r\n    mounted() {\r\n        this.valueLocal = this.value;\r\n        self = this;\r\n        let result = true;\r\n        this.$validator.extend('customChkBox', {\r\n\r\n            validate(value, field) {\r\n                if (value === null || value === self.unchecked) {\r\n                    result = false;\r\n                } else {\r\n                    result = true;\r\n                }\r\n                if (self.backup === null) {\r\n                    value = self.backup;\r\n                    self.resetBackup();\r\n                    self.$emit('input', value);\r\n                }\r\n                return result;\r\n            },\r\n            getMessage(field, value) {\r\n                if (!(result)) {\r\n                    return field + ' is required.';\r\n                }\r\n            },\r\n\r\n        });\r\n    },\r\n    components: {\r\n        FormCheckbox,\r\n    },\r\n    props: {\r\n        value: {\r\n            type: String,\r\n            default: null,\r\n        },\r\n        checked: Boolean,\r\n        id: {\r\n            type: String,\r\n        },\r\n        name: {\r\n            type: String,\r\n        },\r\n        label: {\r\n            type: String,\r\n        },\r\n        labelFor: {\r\n            type: String,\r\n        },\r\n        checkedValue: {\r\n            type: String,\r\n            default: 'Y',\r\n        },\r\n        unchecked: {\r\n            type: String,\r\n            default: 'N',\r\n        },\r\n        validation: {\r\n            type: String,\r\n            default: 'N',\r\n        },\r\n        vertical: {\r\n            type: String,\r\n        },\r\n        disabled: {\r\n            type: Boolean,\r\n        },\r\n    },\r\n    methods: {\r\n        onChange (value) {\r\n          this.$emit('change', value);\r\n        },\r\n        onInput(value) {\r\n            self = this;\r\n            this.$emit('input', value);\r\n            this.$emit('checked', {\r\n              id: this.id,\r\n              checked: value,\r\n            });\r\n        },\r\n        resetBackup() {\r\n            this.backup = 'N';\r\n        },\r\n        // TODO: Fix how validation is being applied\r\n        updateState () {\r\n          if (!(this.isNull)) {\r\n            this.backup = value;\r\n          }\r\n          if (value === null) {\r\n            this.isNull = true;\r\n          }\r\n          this.valueLocal = value;\r\n          if (this.valueLocal == null && this.validation === 'required') {\r\n            this.valueLocal = 'N';\r\n          }\r\n        },\r\n    },\r\n    watch: {\r\n        checked (isChecked) {\r\n          // Set v-model to equal the current checked or unchecked value\r\n          this.valueLocal = isChecked ? this.checkedValue : this.uncheckedValue;\r\n        },\r\n        value(value) {\r\n            if (!(this.isNull)) {\r\n                this.backup = value;\r\n            }\r\n            if (value === null) {\r\n                this.isNull = true;\r\n            }\r\n\r\n            this.valueLocal = value;\r\n            if (this.valueLocal == null && this.validation === 'required') {\r\n                this.valueLocal = 'N';\r\n            }\r\n\r\n        },\r\n    },\r\n    computed: {\r\n        customValidation() {\r\n\r\n            if (this.validation === 'required') {\r\n                return {\r\n                    'customChkBox': this.validation.substring(0, 8) === 'required',\r\n                };\r\n            }\r\n        },\r\n        classObject() {\r\n            if (this.validation) {\r\n                return {\r\n                    'v-required': this.validation.substring(0, 8) === 'required',\r\n                };\r\n            }\r\n        },\r\n    },\r\n    data() {\r\n        return {\r\n            valueLocal: null,\r\n            self: null,\r\n            backup: null,\r\n            isNull: false,\r\n        };\r\n    },\r\n};\r\n</script>\r\n"]}]}