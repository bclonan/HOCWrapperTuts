{"remainingRequest":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\docs\\.vuepress\\components\\forms\\common\\select.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\docs\\.vuepress\\components\\forms\\common\\select.vue","mtime":1553960250135},{"path":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport bFormSelect from 'bootstrap-vue/es/components/form-select/form-select';\r\nimport {\r\n\tmapKeys,\r\n} from 'lodash';\r\n\r\nexport default {\r\n    components: {\r\n        bFormSelect,\r\n    },\r\n    props: {\r\n        disabled: Boolean,\r\n        selectValue: {\r\n            type: String,\r\n            default: 'ctryCd',\r\n        },\r\n        selectText: {\r\n            type: String,\r\n            default: 'description',\r\n        },\r\n        options: {\r\n            type: Array,\r\n        },\r\n        id: {\r\n            type: String,\r\n        },\r\n        maxlength: {\r\n            type: String,\r\n        },\r\n        placeholderText: {\r\n            type: String,\r\n            default: '- Select One -',\r\n        },\r\n        label: {\r\n            type: String,\r\n        },\r\n        labelFor: {\r\n            type: String,\r\n        },\r\n        value: {\r\n            type: String,\r\n            default: null,\r\n        },\r\n        validation: {\r\n            type: String,\r\n        },\r\n        selectSize: String,\r\n        multiple: String,\r\n        helpText: String,\r\n    },\r\n    methods: {\r\n        onInput (value) {\r\n        \tif(value !=null) {\r\n        \t\tthis.$emit('input', value.toString());\r\n        \t} else {\r\n            \tthis.$emit('input', null);\r\n            }\r\n        },\r\n    },\r\n    computed: {\r\n        classObject () {\r\n            if (this.validation) {\r\n                return {\r\n                    'v-required': this.validation.substring(0, 8) === 'required',\r\n                };\r\n            } else {\r\n\t\t\t\treturn this.validation;\r\n\t\t\t}\r\n        },\r\n        newOptions (options) {\r\n            const dataTemp = [];\r\n            for (let i = 0; i < this.options.length; i++) {\r\n                dataTemp[i] = mapKeys(this.options[i], (value, key) => {\r\n                    if (key === this.selectValue) {\r\n                        return 'value';\r\n                    }\r\n                    if (key === this.selectText) {\r\n                        return 'text';\r\n                    }\r\n                    return key;\r\n                });\r\n            }\r\n            return dataTemp;\r\n        },\r\n    },\r\n};\r\n",{"version":3,"sources":["select.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"select.vue","sourceRoot":"docs/.vuepress/components/forms/common","sourcesContent":["<template>\r\n<UCMSFormGroup :class=\"classObject\" :id=\"`lbl${id}`\" :label=\"label\" :label-for=\"`dd${id}`\">\r\n\t<b-form-select :id=\"`dd${id}`\" v-validate=\"validation\" :class=\"{ 'is-invalid': errors.has('dd' + id) }\" :disabled=\"disabled\" :name=\"id\" :options=\"newOptions\" :value=\"value\" @input=\"onInput\" :select-size=\"selectSize\" :multiple=\"multiple\">\r\n\t\t<template slot=\"first\">\r\n\t\t\t<option :value=\"null\">{{placeholderText}}</option>\r\n\t\t</template>\r\n\t</b-form-select>\r\n\t<b-form-text :id=\"'hlp' + id\">{{helpText}}</b-form-text>\r\n\t<div class=\"invalid-feedback\">{{ errors.first(id) }}</div>\r\n</UCMSFormGroup>\r\n</template>\r\n\r\n<script>\r\nimport bFormSelect from 'bootstrap-vue/es/components/form-select/form-select';\r\nimport {\r\n\tmapKeys,\r\n} from 'lodash';\r\n\r\nexport default {\r\n    components: {\r\n        bFormSelect,\r\n    },\r\n    props: {\r\n        disabled: Boolean,\r\n        selectValue: {\r\n            type: String,\r\n            default: 'ctryCd',\r\n        },\r\n        selectText: {\r\n            type: String,\r\n            default: 'description',\r\n        },\r\n        options: {\r\n            type: Array,\r\n        },\r\n        id: {\r\n            type: String,\r\n        },\r\n        maxlength: {\r\n            type: String,\r\n        },\r\n        placeholderText: {\r\n            type: String,\r\n            default: '- Select One -',\r\n        },\r\n        label: {\r\n            type: String,\r\n        },\r\n        labelFor: {\r\n            type: String,\r\n        },\r\n        value: {\r\n            type: String,\r\n            default: null,\r\n        },\r\n        validation: {\r\n            type: String,\r\n        },\r\n        selectSize: String,\r\n        multiple: String,\r\n        helpText: String,\r\n    },\r\n    methods: {\r\n        onInput (value) {\r\n        \tif(value !=null) {\r\n        \t\tthis.$emit('input', value.toString());\r\n        \t} else {\r\n            \tthis.$emit('input', null);\r\n            }\r\n        },\r\n    },\r\n    computed: {\r\n        classObject () {\r\n            if (this.validation) {\r\n                return {\r\n                    'v-required': this.validation.substring(0, 8) === 'required',\r\n                };\r\n            } else {\r\n\t\t\t\treturn this.validation;\r\n\t\t\t}\r\n        },\r\n        newOptions (options) {\r\n            const dataTemp = [];\r\n            for (let i = 0; i < this.options.length; i++) {\r\n                dataTemp[i] = mapKeys(this.options[i], (value, key) => {\r\n                    if (key === this.selectValue) {\r\n                        return 'value';\r\n                    }\r\n                    if (key === this.selectText) {\r\n                        return 'text';\r\n                    }\r\n                    return key;\r\n                });\r\n            }\r\n            return dataTemp;\r\n        },\r\n    },\r\n};\r\n</script>\r\n"]}]}