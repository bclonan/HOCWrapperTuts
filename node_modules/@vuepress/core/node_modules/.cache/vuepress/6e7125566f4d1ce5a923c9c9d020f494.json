{"remainingRequest":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\docs\\.vuepress\\components\\forms\\common\\checkbox.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\docs\\.vuepress\\components\\forms\\common\\checkbox.vue","mtime":1553960250110},{"path":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\bclonan\\Documents\\GitHub\\HOCWrapperTuts\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { FormCheckbox } from 'bootstrap-vue/es/components';\nexport default {\n  mounted: function mounted() {\n    this.valueLocal = this.value;\n    self = this;\n    var result = true;\n    this.$validator.extend('customChkBox', {\n      validate: function validate(value, field) {\n        if (value === null || value === self.unchecked) {\n          result = false;\n        } else {\n          result = true;\n        }\n\n        if (self.backup === null) {\n          value = self.backup;\n          self.resetBackup();\n          self.$emit('input', value);\n        }\n\n        return result;\n      },\n      getMessage: function getMessage(field, value) {\n        if (!result) {\n          return field + ' is required.';\n        }\n      }\n    });\n  },\n  components: {\n    FormCheckbox: FormCheckbox\n  },\n  props: {\n    value: {\n      type: String,\n      default: null\n    },\n    checked: Boolean,\n    id: {\n      type: String\n    },\n    name: {\n      type: String\n    },\n    label: {\n      type: String\n    },\n    labelFor: {\n      type: String\n    },\n    checkedValue: {\n      type: String,\n      default: 'Y'\n    },\n    unchecked: {\n      type: String,\n      default: 'N'\n    },\n    validation: {\n      type: String,\n      default: 'N'\n    },\n    vertical: {\n      type: String\n    },\n    disabled: {\n      type: Boolean\n    }\n  },\n  methods: {\n    onChange: function onChange(value) {\n      this.$emit('change', value);\n    },\n    onInput: function onInput(value) {\n      self = this;\n      this.$emit('input', value);\n      this.$emit('checked', {\n        id: this.id,\n        checked: value\n      });\n    },\n    resetBackup: function resetBackup() {\n      this.backup = 'N';\n    },\n    // TODO: Fix how validation is being applied\n    updateState: function updateState() {\n      if (!this.isNull) {\n        this.backup = value;\n      }\n\n      if (value === null) {\n        this.isNull = true;\n      }\n\n      this.valueLocal = value;\n\n      if (this.valueLocal == null && this.validation === 'required') {\n        this.valueLocal = 'N';\n      }\n    }\n  },\n  watch: {\n    checked: function checked(isChecked) {\n      // Set v-model to equal the current checked or unchecked value\n      this.valueLocal = isChecked ? this.checkedValue : this.uncheckedValue;\n    },\n    value: function (_value) {\n      function value(_x) {\n        return _value.apply(this, arguments);\n      }\n\n      value.toString = function () {\n        return _value.toString();\n      };\n\n      return value;\n    }(function (value) {\n      if (!this.isNull) {\n        this.backup = value;\n      }\n\n      if (value === null) {\n        this.isNull = true;\n      }\n\n      this.valueLocal = value;\n\n      if (this.valueLocal == null && this.validation === 'required') {\n        this.valueLocal = 'N';\n      }\n    })\n  },\n  computed: {\n    customValidation: function customValidation() {\n      if (this.validation === 'required') {\n        return {\n          'customChkBox': this.validation.substring(0, 8) === 'required'\n        };\n      }\n    },\n    classObject: function classObject() {\n      if (this.validation) {\n        return {\n          'v-required': this.validation.substring(0, 8) === 'required'\n        };\n      }\n    }\n  },\n  data: function data() {\n    return {\n      valueLocal: null,\n      self: null,\n      backup: null,\n      isNull: false\n    };\n  }\n};",{"version":3,"sources":["checkbox.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n<UCMSFormGroup :id=\"'lbl' + id\" :label=\"label\" :label-for=\"id\" :class=\"classObject\" v-if=\"vertical=='Y'\">\r\n    <b-form-checkbox v-validate=\"customValidation\" v-model=\"valueLocal\" :name=\"name\" @input=\"onInput\" @change=\"$emit('input', $event)\" :disabled=\"disabled\" :checked=\"checked\" :unchecked-value=\"unchecked\" :value=\"value\" :class=\"{ 'input':true, 'is-invalid': errors.has(name) }\">\r\n    </b-form-checkbox>\r\n    <div class=\"invalid-feedback\" v-show=\"errors.has(name)\">{{ errors.first(name) }}</div>\r\n</UCMSFormGroup>\r\n<div v-else-if=\"vertical !='Y'\">\r\n    <b-form-checkbox v-validate=\"customValidation\" v-model=\"valueLocal\" :name=\"name\" @input=\"onInput\" @change=\"$emit('input', $event)\" :unchecked-value=\"unchecked\" :disabled=\"disabled\" :value=\"checkedValue\" :class=\"{ 'input':true, 'is-invalid': errors.has(name) }\">\r\n        <dpLabel :id=\"id\" :label=\"label\"></dpLabel>\r\n    </b-form-checkbox>\r\n    <div class=\"invalid-feedback\" v-show=\"errors.has(name)\">{{ errors.first(name) }}</div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n    FormCheckbox,\r\n} from 'bootstrap-vue/es/components';\r\n\r\nexport default {\r\n    mounted() {\r\n        this.valueLocal = this.value;\r\n        self = this;\r\n        let result = true;\r\n        this.$validator.extend('customChkBox', {\r\n\r\n            validate(value, field) {\r\n                if (value === null || value === self.unchecked) {\r\n                    result = false;\r\n                } else {\r\n                    result = true;\r\n                }\r\n                if (self.backup === null) {\r\n                    value = self.backup;\r\n                    self.resetBackup();\r\n                    self.$emit('input', value);\r\n                }\r\n                return result;\r\n            },\r\n            getMessage(field, value) {\r\n                if (!(result)) {\r\n                    return field + ' is required.';\r\n                }\r\n            },\r\n\r\n        });\r\n    },\r\n    components: {\r\n        FormCheckbox,\r\n    },\r\n    props: {\r\n        value: {\r\n            type: String,\r\n            default: null,\r\n        },\r\n        checked: Boolean,\r\n        id: {\r\n            type: String,\r\n        },\r\n        name: {\r\n            type: String,\r\n        },\r\n        label: {\r\n            type: String,\r\n        },\r\n        labelFor: {\r\n            type: String,\r\n        },\r\n        checkedValue: {\r\n            type: String,\r\n            default: 'Y',\r\n        },\r\n        unchecked: {\r\n            type: String,\r\n            default: 'N',\r\n        },\r\n        validation: {\r\n            type: String,\r\n            default: 'N',\r\n        },\r\n        vertical: {\r\n            type: String,\r\n        },\r\n        disabled: {\r\n            type: Boolean,\r\n        },\r\n    },\r\n    methods: {\r\n        onChange (value) {\r\n          this.$emit('change', value);\r\n        },\r\n        onInput(value) {\r\n            self = this;\r\n            this.$emit('input', value);\r\n            this.$emit('checked', {\r\n              id: this.id,\r\n              checked: value,\r\n            });\r\n        },\r\n        resetBackup() {\r\n            this.backup = 'N';\r\n        },\r\n        // TODO: Fix how validation is being applied\r\n        updateState () {\r\n          if (!(this.isNull)) {\r\n            this.backup = value;\r\n          }\r\n          if (value === null) {\r\n            this.isNull = true;\r\n          }\r\n          this.valueLocal = value;\r\n          if (this.valueLocal == null && this.validation === 'required') {\r\n            this.valueLocal = 'N';\r\n          }\r\n        },\r\n    },\r\n    watch: {\r\n        checked (isChecked) {\r\n          // Set v-model to equal the current checked or unchecked value\r\n          this.valueLocal = isChecked ? this.checkedValue : this.uncheckedValue;\r\n        },\r\n        value(value) {\r\n            if (!(this.isNull)) {\r\n                this.backup = value;\r\n            }\r\n            if (value === null) {\r\n                this.isNull = true;\r\n            }\r\n\r\n            this.valueLocal = value;\r\n            if (this.valueLocal == null && this.validation === 'required') {\r\n                this.valueLocal = 'N';\r\n            }\r\n\r\n        },\r\n    },\r\n    computed: {\r\n        customValidation() {\r\n\r\n            if (this.validation === 'required') {\r\n                return {\r\n                    'customChkBox': this.validation.substring(0, 8) === 'required',\r\n                };\r\n            }\r\n        },\r\n        classObject() {\r\n            if (this.validation) {\r\n                return {\r\n                    'v-required': this.validation.substring(0, 8) === 'required',\r\n                };\r\n            }\r\n        },\r\n    },\r\n    data() {\r\n        return {\r\n            valueLocal: null,\r\n            self: null,\r\n            backup: null,\r\n            isNull: false,\r\n        };\r\n    },\r\n};\r\n</script>\r\n"],"sourceRoot":"docs/.vuepress/components/forms/common"}]}